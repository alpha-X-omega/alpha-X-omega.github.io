{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "****************\n",
    "Multiple Cameras\n",
    "****************\n",
    "\n",
    "Rectification\n",
    "=============\n",
    "\n",
    "- Dense reconstruction is the process of estimating the depth at every point in\n",
    "  the image.\n",
    "- Planar rectification is suitable when the epipole is sufficiently far outside\n",
    "  the image.  Otherwise, mapping the epipoles to infinity will distort\n",
    "  the image greatly.\n",
    "- Polar rectification is suitable when planar rectification is not.\n",
    "\n",
    "  - The first axis represents the distance to the epipole while the second axis\n",
    "    denotes the angle from the epipole."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.1\n",
    "=============\n",
    "\n",
    ":math:`x_1` and :math:`x_2` lie on the epipolar plane formed by the optical\n",
    "centers and the intersection of the rays.  The line joining the optical centers\n",
    "is called the baseline.  The epipolar lines are formed by tracing points on a\n",
    "ray towards the other optical center.  The projection of :math:`\\mathcal{O}_1`\n",
    "into camera plane 2 is called an epipole (and vice versa).  Epipoles are located\n",
    "at the intersection of epipolar lines in an image."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.2\n",
    "=============\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{a} \\times \\mathbf{b}\n",
    "    &= \\begin{vmatrix}\n",
    "         i & j & k\\\\\n",
    "         a_1 & a_2 & a_3\\\\\n",
    "         b_1 & b_2 & b_3\n",
    "       \\end{vmatrix}\\\\\n",
    "    &= \\begin{bmatrix}\n",
    "         a_2 b_3 - b_2 a_3\\\\\n",
    "         -(a_1 b_3 - b_1 a_3)\\\\\n",
    "         a_1 b_2 - b_1 a_2\n",
    "       \\end{bmatrix}\\\\\n",
    "    &= \\begin{bmatrix}\n",
    "         0 & -a_3 & a_2\\\\\n",
    "         a_3 & 0 & -a_1\\\\\n",
    "         -a_2 & a_1 & 0\n",
    "       \\end{bmatrix}\n",
    "       \\begin{bmatrix} b_1\\\\ b_2\\\\ b_3 \\end{bmatrix}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. _prince2012computer-ex-16.3:\n",
    "\n",
    "Exercise 16.3\n",
    "=============\n",
    "\n",
    "Let :math:`\\{ \\mathbf{\\Omega} \\in \\mathcal{SO}(3),\n",
    "\\boldsymbol{\\tau} \\in \\mathbb{R}^3 \\}` (defined in world coordinates)\n",
    "denote the :doc:`change of coordinates </blog/2016/10/30/coordinate-systems>`\n",
    "from the corresponding camera frame to the world frame:\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{w} =\n",
    "   \\left[\n",
    "     \\begin{array}{c|c} \\boldsymbol{\\Omega} & \\boldsymbol{\\tau} \\end{array}\n",
    "   \\right] \\tilde{\\mathbf{x}} =\n",
    "   \\boldsymbol{\\Omega} \\mathbf{x} + \\boldsymbol{\\tau}\n",
    "\n",
    "where the diacritic :math:`\\tilde{\\cdot}` denotes homogeneous coordinates, and\n",
    ":math:`w, x \\in \\mathbb{R}^3` are the corresponding points in world and camera\n",
    "coordinates respectively.  Consequently, the reverse change of frames in\n",
    "4D homogeneous coordinates is\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\begin{bmatrix}\n",
    "     \\boldsymbol{\\Omega} & \\boldsymbol{\\tau}\\\\\n",
    "     \\boldsymbol{0}^\\top & 1\n",
    "   \\end{bmatrix}^{-1} =\n",
    "   \\left(\n",
    "     \\begin{bmatrix}\n",
    "       \\mathbf{I} & \\boldsymbol{\\tau}\\\\\n",
    "       \\boldsymbol{0}^\\top & 1\n",
    "     \\end{bmatrix}\n",
    "     \\begin{bmatrix}\n",
    "       \\boldsymbol{\\Omega} & \\boldsymbol{0}\\\\\n",
    "       \\boldsymbol{0}^\\top & 1\n",
    "     \\end{bmatrix}\n",
    "   \\right)^{-1} =\n",
    "   \\begin{bmatrix}\n",
    "     \\boldsymbol{\\Omega}^\\top & \\boldsymbol{0}\\\\\n",
    "     \\boldsymbol{0}^\\top & 1\n",
    "   \\end{bmatrix}\n",
    "     \\begin{bmatrix}\n",
    "       \\mathbf{I} & -\\boldsymbol{\\tau}\\\\\n",
    "       \\boldsymbol{0}^\\top & 1\n",
    "     \\end{bmatrix} =\n",
    "   \\begin{bmatrix}\n",
    "     \\boldsymbol{\\Omega}^\\top &\n",
    "       -\\boldsymbol{\\Omega}^\\top \\boldsymbol{\\tau}\\\\\n",
    "     \\boldsymbol{0}^\\top & 1\n",
    "   \\end{bmatrix}.\n",
    "\n",
    "The nodal points in world coordinates are\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathcal{O}_1 = \\boldsymbol{\\Omega}_1 \\boldsymbol{0} + \\boldsymbol{\\tau}_1\n",
    "   \\qquad \\land \\qquad\n",
    "   \\mathcal{O}_2 = \\boldsymbol{\\Omega}_2 \\boldsymbol{0} + \\boldsymbol{\\tau}_2\n",
    "\n",
    "since the projective geometry of image formation sets the center of\n",
    "projection at the origin in camera coordinates :cite:`langer2010pgif`.\n",
    "\n",
    "The epipolar constraint states that\n",
    ":math:`\\{ \\mathbf{w}, \\mathbf{x}_1, \\mathbf{x}_2, \\mathcal{O}_1, \\mathcal{O}_2 \\}`\n",
    "are all coplanar:\n",
    "\n",
    ".. math::\n",
    "\n",
    "   0 &= \\overrightarrow{\\mathcal{O}_1 \\mathbf{w}} \\cdot\n",
    "        \\left(\n",
    "          \\overrightarrow{\\mathcal{O}_1 \\mathcal{O}_2}\n",
    "          \\times\n",
    "          \\overrightarrow{\\mathcal{O}_2 \\mathbf{w}}\n",
    "        \\right)\\\\\n",
    "    &= \\left[\n",
    "         \\left(\n",
    "           \\boldsymbol{\\Omega}_1 \\mathbf{x}_1 + \\boldsymbol{\\tau}_1\n",
    "         \\right) - \\mathcal{O}_1\n",
    "       \\right]^\\top\n",
    "       \\left[\n",
    "         \\left( \\mathcal{O}_2 - \\mathcal{O}_1 \\right)\n",
    "         \\times\n",
    "         \\left(\n",
    "           \\left(\n",
    "             \\boldsymbol{\\Omega}_2 \\mathbf{x}_2 + \\boldsymbol{\\tau}_2\n",
    "           \\right) - \\mathcal{O}_2\n",
    "         \\right)\n",
    "       \\right]\n",
    "       & \\quad & \\text{convert everything into world coordinates}\\\\\n",
    "    &= \\left( \\boldsymbol{\\Omega}_1 \\mathbf{x}_1 \\right)^\\top\n",
    "       \\left[\n",
    "         \\left( \\boldsymbol{\\tau}_2 - \\boldsymbol{\\tau}_1 \\right)\n",
    "         \\times\n",
    "         \\left( \\boldsymbol{\\Omega}_2 \\mathbf{x}_2 \\right)\n",
    "       \\right]\n",
    "       & \\quad & \\text{definition of nodal points}\\\\\n",
    "    &= \\mathbf{x}_1^\\top \\mathbf{E} \\mathbf{x}_2\n",
    "\n",
    "where\n",
    ":math:`\\mathbf{E} = \\boldsymbol{\\Omega}_1^\\top\n",
    "\\left[ \\boldsymbol{\\tau}_2 - \\boldsymbol{\\tau}_1 \\right]_\\times\n",
    "\\boldsymbol{\\Omega}_2` is the essential matrix :cite:`jepson2011eg`."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.4\n",
    "=============\n",
    "\n",
    "The essential matrix is a :math:`3 \\times 3` matrix that relates homogeneous\n",
    "points to epipolar lines.  It contains six degrees of freedom, but is ambiguous\n",
    "up to a scale.  It has rank two.  If we know the intrinsic matrices of the two\n",
    "cameras, we can decompose the essential matrix to recover the rotation exactly\n",
    "and translation up to an unknown scaling factor."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.5\n",
    "=============\n",
    "\n",
    "It seems the second camera undergoes a pure translation because the epipoles lie\n",
    "on the infinity plane (see Figure 16.3)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy\n",
    "\n",
    "W = numpy.asmatrix([[0, -1, 0],\n",
    "                   [1, 0, 0],\n",
    "                   [0, 0, 1]])\n",
    "E = numpy.asmatrix([[0, 0, 10],\n",
    "                   [0, 0, 0],\n",
    "                   [-10, 0, 0]])\n",
    "U, d, Vt = numpy.linalg.svd(E)\n",
    "#grab the last row of V^T or last column of V\n",
    "e1 = Vt[-1].T\n",
    "print('e1: {0}'.format(e1.A1))\n",
    "\n",
    "#grab the last column of U or last row of U^T\n",
    "e2 = U[:, -1]\n",
    "print('e1: {0}'.format(e2.A1))\n",
    "\n",
    "tau_x = U * numpy.diag(d) * W * U.T\n",
    "tau = numpy.asarray([tau_x.A1[7], tau_x.A1[2], tau_x.A1[3]])\n",
    "omega = U * numpy.linalg.inv(W) * Vt\n",
    "print('tau: {0}'.format(tau))\n",
    "print('omega:\\n{0}'.format(omega))\n",
    "\n",
    "for x in [[1, -1, 1], [-5, -2, 1]]:\n",
    "    l = E * numpy.asmatrix(x).T\n",
    "    print('(x, l): ({0}, {1})'.format(x, l.A1))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.6\n",
    "=============\n",
    "\n",
    "Recall that the :math:`U` and :math:`V` are orthogonal matrices in\n",
    ":math:`E_{m \\times n} = U_{m \\times m} L_{m \\times n} V_{n \\times n}^\\top` where\n",
    ":math:`U^\\top U = I_m` and :math:`V^\\top V = I_n`.\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\boldsymbol{\\tau}_{\\times} \\boldsymbol{\\Omega}\n",
    "    &= U L W U^\\top U W^{-1} V^\\top\\\\\n",
    "    &= U L W W^{-1} V^\\top\\\\\n",
    "    &= U L V^\\top\\\\\n",
    "    &= E"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.7\n",
    "=============\n",
    "\n",
    "It is important to note that the essential matrix in\n",
    ":ref:`Exercise 16.3 <prince2012computer-ex-16.3>` assumes the cameras are\n",
    "calibrated as\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{x} =\n",
    "   \\boldsymbol{\\Lambda} \\left[\n",
    "     \\begin{array}{c|c} \\boldsymbol{\\Omega} & \\boldsymbol{\\tau} \\end{array}\n",
    "   \\right] \\tilde{\\mathbf{w}} =\n",
    "   \\boldsymbol{\\Lambda} \\left(\n",
    "     \\boldsymbol{\\Omega} \\mathbf{w} + \\boldsymbol{\\tau}\n",
    "   \\right)\n",
    "\n",
    "where :math:`\\boldsymbol{\\Lambda} = \\mathbf{I}_3`.  When the cameras are not\n",
    "calibrated, they transform the camera coordinates to homogeneous\n",
    "image (pixel) coordinates :cite:`langer2010cm`:\n",
    "\n",
    ".. math::\n",
    "\n",
    "   0 =\n",
    "   \\mathbf{x}_1^\\top \\mathbf{E} \\mathbf{x}_2 =\n",
    "   \\tilde{\\mathbf{p}}_1^\\top \\boldsymbol{\\Lambda}_1^{-\\top} \\mathbf{E}\n",
    "     \\boldsymbol{\\Lambda}_2^{-1} \\tilde{\\mathbf{p}}_2.\n",
    "\n",
    "The fundamental matrix :math:`\\mathbf{F} \\in \\mathbb{R}^{3 \\times 3}` plays the\n",
    "role of the essential matrix for cameras with arbitrary intrinsic matrices\n",
    ":cite:`fisher1997fm`.  It has seven degrees of freedom because it still has the\n",
    "constraint :math:`\\det{\\mathbf{F}} = 0` and is ambiguous up to scale."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.8\n",
    "=============\n",
    "\n",
    "See :ref:`Exercise 15.12 <prince2012computer-ex-15.12>` for details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy\n",
    "\n",
    "outliers = 0.3\n",
    "w = 1.0 - outliers\n",
    "p = 0.99\n",
    "\n",
    "for n in [8, 7]:\n",
    "    k = numpy.log(1 - p) / numpy.log(1 - w**n)\n",
    "    print('n = {0}: k = {1}'.format(n, k))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.9\n",
    "=============\n",
    "\n",
    "Let :math:`\\mathbf{l}_3^1 = \\mathbf{F}_{13} \\tilde{\\mathbf{x}}_1` and\n",
    ":math:`\\mathbf{l}_3^2 = \\mathbf{F}_{23} \\tilde{\\mathbf{x}}_2` denote the\n",
    "epipolar lines in image 3 corresponding to the points\n",
    ":math:`\\{ \\mathbf{x}_1, \\mathbf{x}_2 \\}`.  The position of the corresponding\n",
    "point in image 3 satisfies\n",
    ":math:`\\tilde{\\mathbf{x}}_3 = \\mathbf{l}_3^1 \\times \\mathbf{l}_3^2`.\n",
    "\n",
    "This solution assumes the epipolar lines have a unique intersection.  See\n",
    "tri-focal tensor or quadri-focal tensor for a more robust solution."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.10\n",
    "==============\n",
    "\n",
    "(i)\n",
    "---\n",
    "\n",
    "Define the :math:`\\{ \\mathbf{P}, \\mathbf{W}, \\mathbf{T} \\}` as follows:\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{P}\n",
    "    &= \\begin{bmatrix}\n",
    "         \\boldsymbol{\\pi}_1\\\\\n",
    "         \\boldsymbol{\\pi}_2\\\\\n",
    "         \\vdots\\\\\n",
    "         \\boldsymbol{\\pi}_I\\\\\n",
    "       \\end{bmatrix}\\\\\\\\\n",
    "   \\mathbf{W}\n",
    "    &= \\begin{bmatrix}\n",
    "         \\mathbf{w}_1 & \\mathbf{w}_2 & \\cdots & \\mathbf{w}_J\n",
    "       \\end{bmatrix}\\\\\n",
    "   \\mathbf{T}\n",
    "    &= \\begin{bmatrix}\n",
    "         \\boldsymbol{\\tau}_1 & \\boldsymbol{\\tau}_1 &\n",
    "             \\cdots & \\boldsymbol{\\tau}_1\\\\\n",
    "         \\boldsymbol{\\tau}_2 & \\boldsymbol{\\tau}_2 &\n",
    "             \\cdots & \\boldsymbol{\\tau}_2\\\\\n",
    "         \\vdots & \\vdots & \\ddots & \\vdots\\\\\n",
    "         \\boldsymbol{\\tau}_I & \\boldsymbol{\\tau}_I &\n",
    "             \\cdots & \\boldsymbol{\\tau}_I\n",
    "       \\end{bmatrix}\n",
    "\n",
    "(ii)\n",
    "----\n",
    "\n",
    ":cite:`tomasi1992shape` is the origin of this technique.\n",
    "\n",
    "The translation along the Z-axis is lost due to the orthographic camera model.\n",
    "In order to solve for the rotation using only :math:`\\mathbf{X}`, the\n",
    "measurements need to be centered which eliminates the other translation\n",
    "components.\n",
    "\n",
    "The factorized solution is not unique because\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{X} - \\mathbf{T} =\n",
    "   \\mathbf{P} \\mathbf{W} =\n",
    "   \\mathbf{P} \\mathbf{Q} \\mathbf{Q}^{-1}\\mathbf{W}\n",
    "\n",
    "where :math:`\\mathbf{Q} \\in \\mathcal{GL}(3)`.  If :math:`\\mathbf{P}` is\n",
    "restricted to be an orthonormal matrix, then the solution is unique up to an\n",
    "unknown initial orientation of the world reference frame."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 16.11\n",
    "==============\n",
    "\n",
    "Define\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{J} =\n",
    "   \\begin{bmatrix}\n",
    "     \\mathbf{D}_1 & \\mathbf{V}_1\\\\\n",
    "     \\mathbf{D}_2 & \\mathbf{V}_2\\\\\n",
    "     \\mathbf{D}_3 & \\mathbf{V}_3\n",
    "   \\end{bmatrix}\n",
    "\n",
    "where :math:`\\mathbf{D}_\\cdot, \\mathbf{V}_\\cdot` take on the structure in Figure\n",
    "16.17b.\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbf{J}^\\top \\mathbf{J} =\n",
    "   \\begin{bmatrix}\n",
    "     \\mathbf{D}_1^\\top & \\mathbf{D}_2^\\top & \\mathbf{D}_3^\\top\\\\\n",
    "     \\mathbf{V}_1^\\top & \\mathbf{V}_3^\\top & \\mathbf{V}_3^\\top\n",
    "   \\end{bmatrix}\n",
    "   \\begin{bmatrix}\n",
    "     \\mathbf{D}_1 & \\mathbf{V}_1\\\\\n",
    "     \\mathbf{D}_2 & \\mathbf{V}_2\\\\\n",
    "     \\mathbf{D}_3 & \\mathbf{V}_3\n",
    "   \\end{bmatrix} =\n",
    "   \\left[\n",
    "     \\begin{array}{c|c}\n",
    "       \\mathbf{D}_1^\\top \\mathbf{D}_1 + \\mathbf{D}_2^\\top \\mathbf{D}_2 +\n",
    "           \\mathbf{D}_3^\\top \\mathbf{D}_3 &\n",
    "         \\mathbf{D}_1^\\top \\mathbf{V}_1 + \\mathbf{D}_2^\\top \\mathbf{V}_2 +\n",
    "           \\mathbf{D}_3^\\top \\mathbf{V}_3\\\\\n",
    "       \\hline\n",
    "       \\mathbf{V}_1^\\top \\mathbf{D}_1 + \\mathbf{V}_2^\\top \\mathbf{D}_2 +\n",
    "           \\mathbf{V}_3^\\top \\mathbf{D}_3 &\n",
    "         \\mathbf{V}_1^\\top \\mathbf{V}_1 + \\mathbf{V}_2^\\top \\mathbf{V}_2 +\n",
    "           \\mathbf{V}_3^\\top \\mathbf{V}_3\n",
    "     \\end{array}\n",
    "   \\right]\n",
    "\n",
    "Appendix C.8.2 shows that the above matrix sub-blocks can be inverted via the\n",
    "Schur complement identity."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    ".. rubric:: References\n",
    "\n",
    ".. bibliography:: chapter-16.bib"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "************\n",
    "Introduction\n",
    "************"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 1.1\n",
    "============\n",
    "\n",
    "Let :math:`x_i` denote the number of hours a rolling mill spends on product\n",
    ":math:`i`.  Define :math:`p_i` as the profit and :math:`r_i` as the hourly\n",
    "production rate for product :math:`i`.  The machine can only be used for\n",
    ":math:`t = 40` hours this week and the quantity of each product must not\n",
    "exceed :math:`b_i`.\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\begin{aligned}\n",
    "     \\text{maximize} \\quad\n",
    "       \\sum_i x_i r_i p_i &\\\\\n",
    "     \\text{subject to} \\quad\n",
    "       \\sum_i x_i &= t\\\\\n",
    "       x_i r_i &\\leq b_i\\\\\n",
    "       x_i &\\geq 0\n",
    "   \\end{aligned}\n",
    "\n",
    "From inspection, bands will bring in an hourly profit of\n",
    ":math:`200 \\times 25 = $5000` while coils will yield\n",
    ":math:`140 \\times 30 = $4200`.  Thus the optimal solution should be to produce\n",
    "as many bands as possible and then roll out coils."
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 1.2\n",
    "============\n",
    "\n",
    "Let :math:`x_{ij}` denote the number of tickets sold for flight :math:`i` with\n",
    "fare class :math:`j`.  Define :math:`f_{ij}` as the ticket price and\n",
    ":math:`d_{ij}` as the maximum number of potential customers.  Each leg of the\n",
    "flight cannot exceed :math:`p = 30` passengers and the number of tickets made\n",
    "available cannot exceed the forecasted maximum demand.\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\begin{aligned}\n",
    "     \\text{maximize} \\quad\n",
    "       \\sum_i \\sum_j x_{ij} f_{ij} &\\\\\n",
    "     \\text{subject to} \\quad\n",
    "       \\sum_j x_{1j} + x_{3j} &\\leq p\\\\\n",
    "       \\sum_j x_{2j} + x_{3j} &\\leq p\\\\\n",
    "       0 \\leq x_{ij} &\\leq d_{ij}\n",
    "   \\end{aligned}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Exercise 1.3\n",
    "============\n",
    "\n",
    "Let :math:`b_j` denote the event of asserting that the distribution is :math:`p`\n",
    "when in fact it is :math:`q`.\n",
    "\n",
    "Let :math:`c_j` denote the event of asserting that the distribution is :math:`p`\n",
    "when in fact it is :math:`p`.\n",
    "\n",
    "The latter parts of this exercise can be interpreted as applying Boole's\n",
    "inequality:\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\mathbb{P}\\left( \\bigcup_j b_j \\right) \\leq \\sum_j \\mathbb{P}(b_j)\n",
    "   \\qquad \\land \\qquad\n",
    "   \\mathbb{P}\\left( \\bigcup_j c_j \\right) \\leq \\sum_j \\mathbb{P}(c_j)\n",
    "\n",
    "where :math:`\\mathbb{P}(b_j) = x_j q_j` and :math:`\\mathbb{P}(c_j) = x_j p_j`.\n",
    "The probability of each individual event is defined as such since the act of\n",
    "asserting which distribution an observation came from is independent of that\n",
    "observation's generative process.\n",
    "\n",
    ".. math::\n",
    "\n",
    "   \\begin{aligned}\n",
    "     \\text{maximize} \\quad\n",
    "       \\sum_j p_j x_j &\\\\\n",
    "     \\text{subject to } \\quad\n",
    "       \\sum_j x_j q_j &\\leq \\beta\\\\\n",
    "       \\sum_j x_j &= 1\\\\\n",
    "       0 \\leq x_j &\\leq 1\n",
    "   \\end{aligned}"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
